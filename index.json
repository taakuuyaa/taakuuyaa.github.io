[{"content":"はじめに Nuxt.jsで@nuxt/axios(axios-module)を使いSSR・Store・コンポーネントなどの 様々なコンテキストに対応するaxiosの共通化に少し癖があったので備忘録として残します。\nなぜ共通化するのか？  エンドポイントの修正による変更が大変\nあちこちで↓のようなコードが呼ばれていると検索・置換を使って修正するしかない。  this.$axios.$get(\u0026#39;https://example.com/api/users\u0026#39;)  ヘッダー等に付与する情報を適宜変更したい 可読性が上がる\naxiosの処理を↓のように呼び出せるようになると見やすい  this.$axios.$get(\u0026#39;https://example.com/api/users\u0026#39;) // ↓ 変更 api.getUsers() etc\u0026hellip;\n共通化の方法について 調査してみるとプラグイン初期化のタイミングでアクセスできる$axiosをexportしている例をよく見かけました。\n Nuxt.jsでaxiosの共通処理を作成し、API呼び出し処理をラップして使用する\nhttps://qiita.com/itouuuuuuuuu/items/4132e3b7ddf2cbf02442\n axios-moduleのissueにも共通化に関するものがあったので参考に実装してみました。\n Can I use axios-module in non-vue files? #28\nhttps://github.com/nuxt-community/axios-module/issues/28#issuecomment-340743659\n 実際にうまく動いているように思えましたが一つ問題がありました。\nリクエストヘッダーにはセッションごとに違うトークンを付与して、 サーバ側で実行されるフック(fetch/asyncData)でリクエストを行う実装を行いました。\n複数のブラウザ（セッションがことなる）で同時にリクエストをしたところ 後からリクエストしたレスポンスで返されるべき情報が返されてしまいました。\nこの現象について調べてみたところ以下のissueが参考なりました。\n axios module: axios.setToken where to run? #298\nhttps://github.com/nuxt-community/axios-module/issues/298#issuecomment-318165164\n どうやら$axiosはグローバルとして定義され同時リクエスト時に共有されるため、 import/exportすることは推奨されていないようでした。\nさらに調査して以下の方法にたどり着きました。\n How to import module to external file #101\nhttps://github.com/nuxt-community/axios-module/issues/101#issuecomment-365909923\n  Organize and decouple your API calls in Nuxt.js\nhttps://blog.lichter.io/posts/nuxt-api-call-organization-and-decoupling/\n api用の別プラグインを定義してそこに$axiosインスタンスを注入する方法でした。\n// api/apiFactory.js export default $axios =\u0026gt; ({ getUsers() { return $axios.$get(\u0026#39;https://example.com/api/users\u0026#39;) }, }) // plugins/api.js import { apiFactory } from \u0026#39;~/api/apiFactory\u0026#39; export default ({ $axios }, inject) =\u0026gt; { const api = apiFactory($axios) inject(\u0026#34;api\u0026#34;, api) } さいごに axios-moduleは普通axiosと違いNuxtに統合されたaxiosのため、 import/exportして使うやり方が推奨されないなどの拡張/共通化することに癖がありました。 また、共通化する場合はどのコンテキスト（SSR/CSR/Store/Component）でも呼ばれることを考慮しなければならないので少し大変でした。\n","permalink":"https://taakuuyaa.dev/posts/about-axios-module-commonality/","summary":"はじめに Nuxt.jsで@nuxt/axios(axios-module)を使いSSR・Store・コンポーネントなどの 様々なコンテキストに対応するaxiosの共通化に少し癖があったので備忘録として残します。\nなぜ共通化するのか？  エンドポイントの修正による変更が大変\nあちこちで↓のようなコードが呼ばれていると検索・置換を使って修正するしかない。  this.$axios.$get(\u0026#39;https://example.com/api/users\u0026#39;)  ヘッダー等に付与する情報を適宜変更したい 可読性が上がる\naxiosの処理を↓のように呼び出せるようになると見やすい  this.$axios.$get(\u0026#39;https://example.com/api/users\u0026#39;) // ↓ 変更 api.getUsers() etc\u0026hellip;\n共通化の方法について 調査してみるとプラグイン初期化のタイミングでアクセスできる$axiosをexportしている例をよく見かけました。\n Nuxt.jsでaxiosの共通処理を作成し、API呼び出し処理をラップして使用する\nhttps://qiita.com/itouuuuuuuuu/items/4132e3b7ddf2cbf02442\n axios-moduleのissueにも共通化に関するものがあったので参考に実装してみました。\n Can I use axios-module in non-vue files? #28\nhttps://github.com/nuxt-community/axios-module/issues/28#issuecomment-340743659\n 実際にうまく動いているように思えましたが一つ問題がありました。\nリクエストヘッダーにはセッションごとに違うトークンを付与して、 サーバ側で実行されるフック(fetch/asyncData)でリクエストを行う実装を行いました。\n複数のブラウザ（セッションがことなる）で同時にリクエストをしたところ 後からリクエストしたレスポンスで返されるべき情報が返されてしまいました。\nこの現象について調べてみたところ以下のissueが参考なりました。\n axios module: axios.setToken where to run? #298\nhttps://github.com/nuxt-community/axios-module/issues/298#issuecomment-318165164\n どうやら$axiosはグローバルとして定義され同時リクエスト時に共有されるため、 import/exportすることは推奨されていないようでした。\nさらに調査して以下の方法にたどり着きました。\n How to import module to external file #101\nhttps://github.com/nuxt-community/axios-module/issues/101#issuecomment-365909923\n  Organize and decouple your API calls in Nuxt.","title":"@nuxt/axiosを使ったAPI呼び出し共通化について"},{"content":"はじめに 以下の理由からHUGOを使用してブログを作ってみました！\n 個人的なアウトプットする場所が欲しい スタイル(CSS)を書くのは面倒くさい SSG(静的サイトジェネレータ)を試してみたい  HUGOは静的サイトジェネレータです。\nMarkdownで書かれたファイル（記事）をテンプレートエンジンを通してHTMLにしてくれます。 また、テーマが多く公開されていて簡単にスタイルの整ったページを作れます。\n導入 インストール brew install hugo 確認 hugo version ❯ hugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown テーマの適応 今回はPaperModをテーマとして使用します。\nテーマのインストールについてはこちら を参照してください。\n記事ファイルの作成 hugo new \u0026lt;作成するファイルのパス名\u0026gt; contentディレクトリ配下に.mdファイルが作成されます。\nテーマで使用されるparamsについてはこちら を参照して適宜.mdファイルを変更してください。\n公開する 今回はGitHub Pagesでホスティングすることにしました。\nまた、記事を書いてPush時に自動でデプロイされるようにGitHub Actionsを使いました。 （自分は一つのリポジトリに静的コンテンツを生成するコードと生成された静的コンテンツを一緒に管理したかったので若干参考のリンクと異なります）\nGitHub Pages でホスト  Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する\n GitHub Actionsで自動デプロイ  GitHub Actions による GitHub Pages への自動デプロイ\n さいごに 非常に簡単にビジュアルの良いブログが簡単に作れてしまいました！\n今回はGitHub Pagesにホストすることにしましたが他にもNetlifyやVercelでもホスティングすることができます。\n今後はこちらのブログに日々のアウトプットをしていこうと思います。\nこのブログのリポジトリ\n","permalink":"https://taakuuyaa.dev/posts/create-blog-with-hugo/","summary":"はじめに 以下の理由からHUGOを使用してブログを作ってみました！\n 個人的なアウトプットする場所が欲しい スタイル(CSS)を書くのは面倒くさい SSG(静的サイトジェネレータ)を試してみたい  HUGOは静的サイトジェネレータです。\nMarkdownで書かれたファイル（記事）をテンプレートエンジンを通してHTMLにしてくれます。 また、テーマが多く公開されていて簡単にスタイルの整ったページを作れます。\n導入 インストール brew install hugo 確認 hugo version ❯ hugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown テーマの適応 今回はPaperModをテーマとして使用します。\nテーマのインストールについてはこちら を参照してください。\n記事ファイルの作成 hugo new \u0026lt;作成するファイルのパス名\u0026gt; contentディレクトリ配下に.mdファイルが作成されます。\nテーマで使用されるparamsについてはこちら を参照して適宜.mdファイルを変更してください。\n公開する 今回はGitHub Pagesでホスティングすることにしました。\nまた、記事を書いてPush時に自動でデプロイされるようにGitHub Actionsを使いました。 （自分は一つのリポジトリに静的コンテンツを生成するコードと生成された静的コンテンツを一緒に管理したかったので若干参考のリンクと異なります）\nGitHub Pages でホスト  Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する\n GitHub Actionsで自動デプロイ  GitHub Actions による GitHub Pages への自動デプロイ\n さいごに 非常に簡単にビジュアルの良いブログが簡単に作れてしまいました！","title":"HUGOを使ってブログを作る"},{"content":"","permalink":"https://taakuuyaa.dev/archives/","summary":"archive","title":"Archive"},{"content":"","permalink":"https://taakuuyaa.dev/search/","summary":"search","title":"Search"}]